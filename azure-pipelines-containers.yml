# Node.js with Vue
# Build a Node.js project that uses Vue.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- main

variables:
  vmImageName: ubuntu-latest

stages:
- stage: Build
  displayName: Build stage

  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: Docker@2
      displayName: Nginx + Build
      inputs:
        containerRegistry: 'ragc-vuepoc-acr'
        repository: 'vuepoc-nginx-source'
        command: 'buildAndPush'
        Dockerfile: '**/Blessed.Build.Dockerfile'
        buildContext: 'hello-world'

    # - task: Docker@2
    #   displayName: Blessed Source
    #   inputs:
    #     containerRegistry: 'ragc-vuepoc-acr'
    #     repository: 'vuepoc-blessed-source'
    #     command: 'buildAndPush'
    #     Dockerfile: '**/Blessed.Build.Dockerfile'
    #     buildContext: 'hello-world'

    # - task: Docker@2
    #   displayName: Blessed Build
    #   inputs:
    #     containerRegistry: 'ragc-vuepoc-acr'
    #     repository: 'vuepoc-blessed-build'
    #     command: 'buildAndPush'
    #     Dockerfile: '**/Blessed.Build.Dockerfile'
    #     buildContext: 'hello-world'

# - stage: DeployAppSvcLinux
#   displayName: Deploy AppSvc Linux Web
#   dependsOn: Build
#   condition: succeeded()

#   jobs:
#   - deployment: Deploy
#     displayName: Deploy
#     environment: 'VuePoC-AppSvcLinuxWebApp'
#     pool:
#       vmImage: $(vmImageName)

#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - task: AzureRmWebAppDeployment@4
#             inputs:
#               ConnectionType: 'AzureRM'
#               azureSubscription: 'FTA RALARCON - Azure CXP Internal (cff5d937-9797-41da-b990-ba5295efb820)'
#               appType: 'webAppLinux'
#               WebAppName: 'ragc-vuepoc-appsvc'
#               packageForLinux: '$(Pipeline.Workspace)/drop/dist.zip'
#               RuntimeStack: 'NODE|14-lts'
#               StartupCommand: 'npx serve -s'


